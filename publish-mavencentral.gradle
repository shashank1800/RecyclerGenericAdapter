task androidSourcesJar(type: Jar) {
    classifier 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}
ext["signing.secretKeyRingFile"] = "${rootDir}/" + ext["signing.secretKeyRingFile"]

println PUBLISH_GROUP_ID
println PUBLISH_ARTIFACT_ID
println PUBLISH_VERSION
println ext["signing.keyId"]
println ext["signing.password"]
println ext["signing.secretKeyRingFile"]
println ext["ossrhUsername"]
println ext["ossrhPassword"]

project.afterEvaluate {
    publishing {
        publications {

            release(MavenPublication) {

                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                // Two artifacts, the `aar` and the sources
                artifact("$buildDir/outputs/aar/RecyclerGenericAdapter-release.aar")
                artifact androidSourcesJar

                // Self-explanatory metadata for the most part
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'This is an Android library used to avoid writing an adapter for your RecyclerView every time and ' +
                            'write less code to populate RecyclerView with any type of model and with any layout.'

                    url = 'https://shashank1800.github.io/RecyclerGenericAdapter'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'shashank1800'
                            name = 'Shashank Bhat'
                            email = 'shashankbhat1800@gmail.com'
                        }
                    }
                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        connection = 'scm:git:github.com/shashank1800/RecyclerGenericAdapter.git'
                        developerConnection = 'scm:git:ssh://github.com/shashank1800/RecyclerGenericAdapter.git'
                        url = 'https://shashank1800.github.io/RecyclerGenericAdapter/'
                    }

                }
            }
        }
        repositories {
            // The repository to publish to, Sonatype/MavenCentral
            maven {
                // This is an arbitrary name, you may also use "mavencentral" or
                // any other name that's descriptive for you
                name = "sonatype"

                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                // You only need this if you want to publish snapshots, otherwise just set the URL
                // to the release repo directly
                url "${releasesRepoUrl}"

                println url

                // The username and password we've fetched earlier
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }

    }
}



signing {
    sign publishing.publications
}